{"version":3,"sources":["Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["game","props","gameStart","setState","gameOver","state","data","activeWord","word","activeMeaning","meaning","activeLetters","completedCount","timer","speed","document","addEventListener","e","preventDefault","which","this","length","key","newLetter","concat","nextWordIndex","split","bind","setInterval","Math","ceil","random","gameBoard","gameOverResult","gameStartSelect","typingLetters","map","item","i","correct","undefined","push","className","data-correct","actualLetters","value","primary","onClick","Component","App","list","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1abcdd62.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport * as ReactDOM from 'react-dom';\nimport './Game.css';\n\n// ES2015 module syntax\nimport {\n    Button, ButtonGroup, DropDownButton, DropDownButtonItem,\n    SplitButton, SplitButtonItem, Toolbar, ToolbarItem\n} from '@progress/kendo-react-buttons';\n\n\n// ES2015 module syntax\nimport { RadialGauge } from '@progress/kendo-react-gauges';\n\n\nclass game extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            gameStart: false,\n            gameOver: false,\n            data: this.props.data,\n            activeWord: this.props.data[0].word,\n            activeMeaning: this.props.data[0].meaning,\n            activeLetters: [],\n            completedCount: 0,\n            timer: 0,\n            speed: 0\n        };\n    }\n\n    componentWillMount() {\n\n        document.addEventListener('keydown', function (e) {\n            e.preventDefault();\n\n            if (e.which >= 65 && e.which <= 90) {\n                if (this.state.activeLetters.length == 0) {\n                    if (this.state.activeWord[0] === e.key) {\n                        var newLetter = this.state.activeLetters.concat(e.key)\n                        this.setState({\n                            activeLetters: newLetter\n                        })\n                    }\n                } else if (this.state.activeWord[this.state.activeLetters.length] === e.key) {\n                    var newLetter = this.state.activeLetters.concat(e.key)\n                    this.setState({\n                        activeLetters: newLetter\n                    })\n                }\n\n                var nextWordIndex = this.state.completedCount + 1\n\n                if (nextWordIndex === this.state.data.length) {\n                    this.setState({\n                        gameOver: true,\n                        completedCount: 0,\n                        gameStart: false,\n                        activeWord: this.props.data[0].word,\n                        activeMeaning: this.props.data[0].meaning,\n                        activeLetters: [],\n                        completedCount: 0,\n                        timer: 0,\n                        speed: 0\n                    })\n                }\n\n                if (this.state.activeWord.split(\"\").length === this.state.activeLetters.length) {\n                    this.setState({\n                        completedCount: nextWordIndex,\n                        activeWord: this.state.data[nextWordIndex].word,\n                        activeMeaning: this.state.data[nextWordIndex].meaning,\n                        activeLetters: []\n\n                    })\n                }\n\n\n\n\n            }\n\n\n\n\n        }.bind(this));\n    }\n\n    componentDidMount() {\n        setInterval(\n            () => {\n                this.setState({\n                    speed: Math.ceil(Math.random() * 100)\n                });\n            },\n            1000);\n    }\n\n    gameStart = () => {\n        this.setState({\n            gameStart: true,\n            gameOver: false\n        });\n    }\n\n    render() {\n        let typingLetters = [];\n        let gameBoard;\n        let gameOverResult;\n        let gameStartSelect;\n        this.state.activeWord.split(\"\").map((item, i) => {\n            let correct;\n            if (this.state.activeLetters[i] === undefined) {\n                correct = undefined\n            }\n            else if (this.state.activeLetters[i] === item) {\n                correct = true\n                typingLetters.push(<span className=\"typing-single-char\" key={i} data-correct={correct}>{item}</span>)\n            }\n            else {\n                correct = false\n            }\n        });\n\n        let actualLetters = [];\n        this.state.activeWord.split(\"\").map((item, i) => {\n            actualLetters.push(<span className=\"origin-single-char\" key={i} >{item}</span>)\n        });\n\n        const radialOptions = {\n            pointer: {\n                value: this.state.value\n            }\n        };\n\n        gameBoard = (<div>\n            <div className=\"upper-row\">\n                <div className=\"word-lst\">\n                    <div className=\"word-container\">\n                        <div className=\"the-word\">{this.state.activeWord}</div>\n                        <div className=\"the-meaning\">{this.state.activeMeaning}</div>\n\n                    </div></div>\n\n                <div className=\"measure\">\n                    <div className=\"time-cd\">Time Left: {this.state.timer}</div>\n                    <div className=\"time-cd\">Completed:{this.state.completedCount}</div>\n                </div>\n\n            </div>\n            <div className=\"typing-area\">\n                <div className=\"typing-container\">\n                    {typingLetters}\n                </div>\n                <div className=\"origin-word\">\n                    {actualLetters}\n                </div>\n            </div>\n\n        </div>)\n\n        gameOverResult = (\n            <div>\n                Completed:{this.state.completedCount}\n                <Button primary={true} onClick={this.gameStart}>RESTART</Button>\n            </div>\n\n        )\n        gameStartSelect = (\n            <div>Vocab Practice and Typing Game<Button primary={true} onClick={this.gameStart}>START</Button></div>\n        )\n\n        return (\n\n            <div>{this.state.gameOver ? gameOverResult : this.state.gameStart ? gameBoard : gameStartSelect}</div>\n\n        );\n    }\n}\n\nexport default game;\n","import React, { Component } from \"react\";\nimport './App.css';\nimport Game from \"./Game/Game.js\";\nimport data from \"./data/data.json\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: data.list\n    };\n  }\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Game data={this.state.data} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}